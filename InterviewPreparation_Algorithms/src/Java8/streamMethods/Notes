Non Terminal method // intermediary methods // processing methods
filter()
map()
flatMap()
distinct()
limit()

	-- intermediary operatiosn returns streams of object or collection
	
------------------------------------------------------------------------------------------------------------
Terminal Method

collect() -- return type collection
count() -- return type long
forEach()
reduce()  -- return Optional<Object>
toArray()
min()  -- return type Optional<Integer>
max()

------------------------------------------------------------------------------------------------------------
Operational Sequence

stream()
		.filter() or map() or flatmap() -- these things will be dealt by lambda expression
		.min() or max() -- dealt by lambda , it takes Comparator and need to pass two arguments
		.sorted()
		.collect(Collectors.toList or toMap or toSet) or collect()
		.count() or distinct()
		.forEach()

----------------------------------------------------------------------------------------------------------------
Stream.of();
		group of values there happily you can go for Stream
----------------------------------------------------------------------------------------
stream() - to process collection objects // to some operation on collection object
-----------------------------------------------------------------------------------------
filter(Predicate) - it returns boolean 
					input --> 10 elements 
					output <= 10 elements
					
					failedstudents.stream().filter(i - > i%2 == 0).collect(Collectors.toList())
					

---------------------------------------------------------------------------------------
map(Function) -	it does some operation, takes input processes it and returns output 
				input --> 10 elements after an operation 
				output = 10 elements
				
				failedstudents.stream().map(i -> i+5).collect(Collectors.toList())
-------------------------------------------------------------------------------------
collect() - 
----------------------------------------------------------------------------------------
count() - 
--------------------------------------------------------------------------------------------
sorted() - if you want to apply own sorting you can use comparator

default sorting sorted() internally uses comparable interface and uses compareTo()
			i1,i2 ---> i1.compareTo(i2)

Customized sorting
Comparator --> compare(obj1,obj2)
		
			returns -ve if obj1 comes before obj2
			returns +ve if obj1 comes after obj2
			returns 0 if obj1 && obj2 are equal
			
			(i1,i2) -> (i1 < i2)?1:(i1 > i2):-1:0
			
			sorted() --> According to default natural sorting order
			sorted(Comparator) ==> Customized sorting


for String natural sorting
(s1,s2) -> s1.compareTo(s2); // natural sorting

(s1,s2) -> s2.compareTo(s1); // reverse
or
(s1,s2) -> -s1.compareTo(s2); // reverse



# Sorting on the basis of string length

(s1,s2) -> {
				int l1 = s1.length();
				int l2 = s2.length();
				if(l1<l2) return -1;
				else if(l1>l2) return +1;
				else return s1.compareTo(s2);
			}
			
or

(s1,s2) -> {
				int l1 = s1.length();
				int l2 = s2.length();
				((l1<l2) -> (l1<l2)?-1:(l1<l2)?1:s1.compareTo(s2));
			}

 ---------------------------------------------------------------------------------------------
 min()
 comparator
 (i1,i2) -> i1.compareTo(i2)
 ----------------------------------------------------------------------------------------------
 max()
 ------------------------------------------------------------------------------------------------
forEach() --

l.stream().forEach(Consumer)

l.stream().forEach(System.out::println)


----------------------------------------------------------------------------------------------------
toArray()

	to convert stream into Array
	
Integer[] i =l.stream().toArray(Integer[]::new);


--------------------------------------------------------------------------------------------------------
 stream() --> known as sequential stream as it operates one by one sequentially
 
 parallelStream() --> creates sub streams internally and each sub streams performs operations parallelly
 
 we can call parallel() after stream() to make to it perform parallelly or call parallelStream()
 
 stream().parallel()
 
 or parallelStream()
 
 --------------------------------------------------------------------------------------------------------
 reduce()
 it reduces and combines the streams
 
 ----------------------------------------------------------------------------------------------------------
 
 anyMatch()
 allMatch()
 noneMatch()
 				-- all thsese takes Predicate and returns boolean
 findAny() -- return Optional<Object>
 findFirst()
 
 
 Concatenating streams
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 